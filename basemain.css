body {
    background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%);
    height: 100vh;
    overflow: hidden;
    display: block;
    justify-content: center;
    align-items: center;
}

a {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 200px;
    height: 50px;
    background: #fff;
    border-radius: 999px;
}

.macho {
    display: flex;
    flex-direction: row width: 100%;
    text-align: center;
    justify-content: center;



}

.row {
    text-align: center;
    justify-content: center;
    margin-top: 200px;
}

.xyz {
    padding: 20px;
}



a:hover {
    box-shadow: 0 0 20px 10px rgba(230, 30, 10, 0.6);
    animation: burn 1000ms ease-out forwards;
}

a::before {
    content: '';
    position: absolute;
    left: 40px;
    width: 100px;
    height: 40px;
    /*            background: rgba(255, 230, 110, 1);*/
    border-radius: 100%;
    animation: flare 1000ms ease-out forwards;
}

a::after {
    content: '';
    position: absolute;
    right: 40px;
    width: 100px;
    height: 40px;
    /*            background: rgba(255, 230, 110, 1);*/
    border-radius: 100%;
    animation: flare 1000ms ease-out forwards;
}
}
}

@keyframes flare {
    100% {
        transform: translateY(-20px) scale(1.5);
        filter: blur(10px);
        opacity: 0;
    }
}

@keyframes burn {
    0% {
        color: rgba(255, 130, 110, 1);
        /*        background: rgba(255, 230, 110, 1);*/
        box-shadow:
            0 0 5px 0 rgba(200, 0, 10, 1),
            0 0 5px 0 rgba(230, 30, 10, 0.8),
            0 0 5px 0 rgba(230, 230, 10, 0.6);
    }

    100% {
        color: rgba(0, 0, 0, 1);
        background: rgba(255, 255, 255, 1);
        box-shadow:
            0 -35px 40px 30px rgba(255, 130, 10, 0),
            0 -30px 30px 10px rgba(230, 30, 10, 0),
            0 -20px 10px 0 rgba(255, 255, 10, 0);
    }
}



/*EFFECTS*/
@import url('https://fonts.googleapis.com/css?family=Montserrat:100');


html,
body,
h1 {

    font-family: 'Montserrat', sans-serif;
}

#app {}

#wrapper {
    text-align: center;
    justify-content: center;
    margin-left: 70px;
}

.sub {
    color: rgb(100, 220, 220);
    letter-spacing: 1em;
}

/*// Here's the meat and potatoes.*/

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch {
    position: relative;
    color: white;
    font-size: 4em;
    letter-spacing: .5em;
    /* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
    animation: glitch-skew 1s infinite linear alternate-reverse;

    // Creates a copy before our text. 
    &::before {
        // Duplicates our text with the mixin.
        @include glitchCopy;
        // Scoots text slightly to the left for the color offset.
        left: 2px;
        // Creates the color 'shadow' that happens on the glitch.
        text-shadow: -2px 0 #ff00c1;
        /* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
        clip: rect(44px, 450px, 56px, 0);
        /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
        animation: glitch-anim 5s infinite linear alternate-reverse;
    }

    // Creates a copy after our text. Note comments from ::before.
    &::after {
        @include glitchCopy;
        left: -2px;
        text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
        animation: glitch-anim2 1s infinite linear alternate-reverse;
    }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
    $steps: 20;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
    $steps: 20;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
    $steps: 10;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            transform: skew((random(10) - 5) + deg);
        }
    }
}
